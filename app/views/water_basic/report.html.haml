= content_for :title do
  Basic Report

.report

  .report--header

    .report--header--pretitle= t('report.water_final_report')
    %h1.report--header--title= t('report.summmary')
    .report--header--quicklink= ">> #{t('report.cross_to_sanitation')}"

    - if flash[:results][:is_form_ready]
      .report--summary
        .report--summary--item
          .report--summary--item--title= t('report.total_cost')
          .report--summary--item--value="US$ #{number_with_delimiter(flash[:results][:total], :delimiter=>',')}"
          .report--summary--item--caption= t('report.caption_total_cost', population: flash[:results][:population])

        .report--summary--item
          .report--summary--item--title= t('report.level_of_service')
          .report--summary--item--rating
            - ( flash[:results][:service_rating] + 1 ).times do
              .report--rating_icon.icon--star-full
            - ( 3 - flash[:results][:service_rating] ).times do
              .report--rating_icon.icon--star-empty
          .report--summary--item--caption= t('report.substandard')


      .report--summary--description
        .report--summary--description--icon{ :class => flash[:results][:cost_rating] == 1 ? "icon--status-good" : "icon--status-bad" }
        .report--summary--description--caption= flash[:results][:cost_rating_label].html_safe

      %section.report--review{ "data-togglecontent" => "true" }
        %a.report--review--link{ :href => '#', "data-togglecontent-link" => "true" }= "#{t('report.full_review')} >>"
        .report--review--content{ "data-togglecontent-content" => "true" }
          .report--review--content--text= simple_format flash[:results][:service_level]

    - else
      .report--summary--description
        .report--summary--description--caption= t('report.report_box_no_value')


  %section.report--section
    .report--section--title= t('report.context');

    .report--option_grid
      - flash[:results][:context_report].each_slice(3) do |box_by_row|
        .report--option_grid--row

          - box_by_row.each do |box|
            .report--option_grid--item
              .report--option_grid--item--content
                .report--option_grid--item--title= box[:title]
                %div{ :class => "icon--tool-#{box[:css_icon]}" }
                .report--option_grid--item--caption= box[:caption]
                = link_to 'Edit', box[:link], :class => 'report--option_grid--item--edit'


  %section.report--section
    .report--section--title= t('report.cost');
    .report--section--subtitle= t('report.cost_subtitle', population: flash[:results][:population])

    - if flash[:results][:is_cost_avaliable]
      .report--chart
    - else
      .row
        .large-12.columns
          .box-no-value
            .caption
              = t('report.cost_box_no_value')

    .report--costs
      - flash[:results][:cost_report].each do |cost_box|
        .report--costs--column.report--costs--column-small
          .report--costs--title= cost_box[:title]
          .report--costs--detail
            .report--costs--detail--value= cost_box[:value]
            = link_to 'Edit', cost_box[:link], :class => 'report--costs--detail--edit'

      .report--costs--column.report--costs--column-big
        .report--costs--title= t('report.total')
        .report--costs--bigvalue US #{number_to_currency(flash[:results][:total], precision: 2)}


  %section.report--section
    .report--section--title= t('report.service');
    .report--section--subtitle= t('report.distance')

    .report-service_level
      .report-service_level--value
        .report-service_level--prefix= flash[:results][:time][:header]
        .report-service_level--amount= flash[:results][:time][:amount]
        .report-service_level--suffix= t('report.time.minutes')
      = link_to 'Edit', './time', :class => 'report-service_level--edit'

    .report--option_grid
      - flash[:results][:service_report].each_slice(3) do |box_by_row|
        .report--option_grid--row

          - box_by_row.each do |box|
            .report--option_grid--item
              .report--option_grid--item--content
                .report--option_grid--item--title= box[:title]
                %div{ :class => "icon--tool-#{box[:css_icon]}" }
                .report--option_grid--item--caption= box[:caption]
                = link_to '', box[:link], :class => 'report--option_grid--item--edit'



/Script to google chart
%script{:src => 'http://www.google.com/jsapi', :type => 'text/javascript'}
:javascript
  google.load('visualization', '1', {packages: ['corechart']});
:javascript
  function expenditureGraph() {

      var _C= #{(flash[:results][:capital]|| 0)};
      var _R= #{(flash[:results][:recurrent]|| 0)};
      var _P= #{(flash[:results][:population]|| 0)};
      var graphContainer = $('.report--chart')

      if(_C && _R){

          var data = new google.visualization.DataTable();

          data.addColumn('string', 'Year');
          data.addColumn('number', 'Expenditure');
          data.addColumn({type:'string', role:'annotation'}); // annotation role col.
          data.addColumn({type:'string', role:'annotationText'}); // annotationText col
          data.addColumn({type:'string', role:'tooltip'}); // tooltip role col

          capExpByPopulation = _C*_P;
          recExpByPopulation = _R*_P;
          accounting.settings = {
              currency: {
                  symbol : "US$",   // default currency symbol is '$'
                  format: "%s %v", // controls output: %s = symbol, %v = value/number (can be object: see below)
                  decimal : ".",  // decimal point separator
                  thousand: ",",  // thousands separator
                  precision : 0  // decimal places
              },
              number: {
                  precision : 0,  // default precision on numbers is 0
                  thousand: ",",
                  decimal : "."
              }
          }

          graphDataRows=
          [
            [
              'Setup',
              capExpByPopulation,
              accounting.formatMoney(capExpByPopulation),
              'You spent '+accounting.formatMoney(capExpByPopulation)+' to setup the service',
              'setup\nExpenditure: '+accounting.formatMoney(capExpByPopulation)
            ],
            [
              '1',
              recExpByPopulation,
              accounting.formatMoney(recExpByPopulation),
              accounting.formatMoney(recExpByPopulation)+' is your annual expenditure',
              '1\nExpenditure: '+accounting.formatMoney(recExpByPopulation)
            ],
          ];

          for(i=2;i<=10;i++)
          {
            graphDataRows.push(
              [
                i+'',
                recExpByPopulation,
                null,
                null,
                i+'\nExpenditure: '+accounting.formatMoney(recExpByPopulation)
              ]
            );
          }

          data.addRows(graphDataRows);

          // Create and draw the visualization.
          new google.visualization.LineChart(graphContainer[0]).
                  draw(data, {curveType: "none",
                      axisTitlesPosition: "out",
                      legend: { position: "none" },
                      width: graphContainer.width(), height: Math.round(graphContainer.width()*0.25),
                      hAxis: { titleTextStyle: { color: '#a6955f' }, textStyle: { color: '#a6955f' }, basline: 1, baselineColor: '#a6955f', gridlines: {color: '#fff', count:4}, maxTextLines: 1, maxAlternation: 1 },
                      vAxis: { titleTextStyle: { color: '#a6955f' }, textStyle: { color: '#a6955f' }, textPosition:'none', baselineColor: '#a6955f', gridlines: null, maxValue: 10,  format:'US$ ###,###.##' },
                      backgroundColor: "transparent",
                      lineWidth: 4,
                      colors: ['#ffffff'],
                      //annotations: { style: 'line'},
                      'chartArea': { 'width': '75%', 'height': '70%'}
                  }
          );
      }
  }

  google.setOnLoadCallback(expenditureGraph);











