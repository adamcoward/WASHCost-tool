.report
  .primary-section
    .row
      .large-4.large-offset-4.columns.header
        = t('report.water_final_report')
      .large-4.columns.cross
        = ">> #{t('report.cross_to_sanitation')}"
    .row
      .large-12.columns.title
        = t('report.summmary')
    .row
      .large-3.large-offset-3.columns.total_cost
        .title
          = t('report.total_cost')
        .value
          ="US$ #{number_with_delimiter(flash[:results][:total], :delimiter=>',')}"
        .caption
          = t('report.caption_total_cost', population: flash[:results][:population])
      .large-3.columns.level_of_service
        .title
          = t('report.level_of_service')
        .rating{class: "level-start-#{flash[:results][:service_rating] + 1}"}
        .caption
          = t('report.substandard')
      .large-3.columns
    .row
      .large-6.large-offset-3.columns.result
        .icon{:class => "bench-icon-#{flash[:results][:cost_rating]}"}
        .caption
          = flash[:results][:cost_rating_label].html_safe
        .review
          .section-container.section-review{"data-section" => "accordion"}
            %section
              %p.title.title-review{"data-section-title" => ""}
                %a{:href => "#section-review"}= "#{t('report.full_review')} >>"
              .content.content-review{"data-section-content" => "", "data-slug" => "section-review"}
                %p= simple_format flash[:results][:service_level]
  .content-section.context
    .row
      .large-12.columns
        .title
          = t('report.context');
    - flash[:results][:context_report].each_slice(3) do |box_by_row|
      .row
        - box_by_row.each do |box|
          .large-4.columns
            .box-report
              .title
                = box[:title]
              .icon{class: box[:css_icon]}
              .caption
                = box[:caption]
              .edit
                = link_to box[:link] do
                  = image_tag 'iconEdit24.png', class: ''
  .content-section.cost
    .row
      .large-12.columns
        .title
          = t('report.cost');
        .subtitle
          = t('report.cost_subtitle', population: flash[:results][:population])
    .row
      .large-12.columns
        .graph
          #graphContent
    .row
      - flash[:results][:cost_report].each do |cost_box|
        .large-3.columns
          .title-cost-box
            = cost_box[:title]
          .cost-box-report
            .value
              = cost_box[:value]
            .edit
              = link_to cost_box[:link] do
                = image_tag 'iconEdit24.png', class: ''
      .large-6.columns
        .title-cost-box
          = t('report.total')
        .total
          US #{number_to_currency(flash[:results][:total], precision: 2)}
  .content-section.service_level
    .row
      .large-12.columns
        .title
          = t('report.service');
        .subtitle
          = t('report.distance')
    .row
      .large-12.columns
        .distance-container
          .house
            = image_tag 'report/house-distance.png'
          .line-to-right
            .canvas
          .value
            .header
              less than
            .amount
              60
            .caption
              = t('report.time.minutes')
          .water
            = image_tag 'report/water-distance.png'
          .line-to-left
            .canvas
    .row
      .large-12.columns
        .edit-distance
          = link_to './time' do
            = image_tag 'iconEdit24.png', class: ''
    - flash[:results][:service_report].each_slice(3) do |box_by_row|
      .row
        - box_by_row.each do |box|
          .large-4.columns
            .box-report
              .title
                = box[:title]
              .icon{class: box[:css_icon]}
              .caption
                = box[:caption]
              .edit
                = link_to box[:link] do
                  = image_tag 'iconEdit24.png', class: ''

/Script to google chart
%script{:src => 'http://www.google.com/jsapi', :type => 'text/javascript'}
:javascript
  google.load('visualization', '1', {packages: ['corechart']});
:javascript
  function expenditureGraph() {

      var _C= #{(flash[:results][:capital]|| 0)};
      var _R= #{(flash[:results][:recurrent]|| 0)};
      var _P= #{(flash[:results][:population]|| 0)};
      var graphContainer = $('#graphContent')

      if(_C && _R){

          var data = new google.visualization.DataTable();

          data.addColumn('string', 'Year');
          data.addColumn('number', 'Expenditure');
          data.addColumn({type:'string', role:'annotation'}); // annotation role col.
          data.addColumn({type:'string', role:'annotationText'}); // annotationText col
          data.addColumn({type:'string', role:'tooltip'}); // tooltip role col

          capExpByPopulation = _C*_P;
          recExpByPopulation = _R*_P;
          accounting.settings = {
              currency: {
                  symbol : "US$",   // default currency symbol is '$'
                  format: "%s %v", // controls output: %s = symbol, %v = value/number (can be object: see below)
                  decimal : ".",  // decimal point separator
                  thousand: ",",  // thousands separator
                  precision : 0  // decimal places
              },
              number: {
                  precision : 0,  // default precision on numbers is 0
                  thousand: ",",
                  decimal : "."
              }
          }

          graphDataRows=[['Setup', capExpByPopulation, accounting.formatMoney(capExpByPopulation), 'You spent '+accounting.formatMoney(capExpByPopulation)+' to setup the service', 'setup\nExpenditure: '+accounting.formatMoney(capExpByPopulation)],
              ['1',  recExpByPopulation, accounting.formatMoney(recExpByPopulation), accounting.formatMoney(recExpByPopulation)+' is your annual expenditure', '1\nExpenditure: '+accounting.formatMoney(recExpByPopulation)],
          ];
          for(i=2;i<=10;i++){
            graphDataRows.push([i+'',recExpByPopulation, null, null, i+'\nExpenditure: '+accounting.formatMoney(recExpByPopulation)])
          }
          data.addRows(graphDataRows);

          // Create and draw the visualization.
          new google.visualization.LineChart(document.getElementById('graphContent')).
                  draw(data, {curveType: "none",
                      axisTitlesPosition: "out",
                      legend: { position: "none" },
                      width: graphContainer.width(), height: Math.round(graphContainer.width()*0.25),
                      hAxis: { title: 'Year', titleTextStyle: { color: '#a6955f' }, textStyle: { color: '#a6955f' }, basline: 1, baselineColor: '#a6955f', gridlines: {color: '#fff'}, maxTextLines: 1, maxAlternation: 1 },
                      vAxis: { title: 'Expenditure', titleTextStyle: { color: '#a6955f' }, textStyle: { color: '#a6955f' },baselineColor: '#a6955f', gridlines: {color: '#a6955f'}, maxValue: 10,  format:'US$ ###,###.##' },
                      backgroundColor: "transparent",
                      lineWidth: 4,
                      colors: ['#ffffff'],
                      //annotations: { style: 'line'},
                      'chartArea': { 'width': '75%', 'height': '70%'}
                  }
          );
      }
  }

  google.setOnLoadCallback(expenditureGraph);











