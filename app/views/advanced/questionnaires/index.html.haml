.advanced-fictitius-tool
  .main-form
    %h1 Advanced Provitional Tool
    .note
      Just for check the calculation process
    = simple_form_for @descriptor, url: save_advanced_reports_path do |f|
      = f.input :title
      = f.input :sanitation_service_type, collection: ['Instsalled', 'Pre-existing', 'Don\'t Know'], include_blank: false, input_html: { class: 'chzn-select'}
      = f.input :country, input_html: { class: 'chzn-select'}
      = f.input :region
      = f.input :city
      = f.input :area_type, collection: ['Rural', 'Small Town', 'Peri-Urban', 'Urban', 'Don\'t Know'], input_html: { class: 'chzn-select'}
      = f.input :population_density, collection: ['less than 150 inhabitants/km2', '>=300 inhabitants/km2'], input_html: { class: 'chzn-select'}
      = f.input :service_management, collection: ['External donor', 'Community-based management', 'Public sector (local)', 'Public sector (national)', 'Private sector', 'Utility management', 'Household management', 'Other'], as: :check_boxes
      = f.input :service_financing, collection: ['External donor', 'Community-based management', 'Public sector (local)', 'Public sector (national)', 'Private sector', 'Utility management', 'Household management', 'Other'], as: :check_boxes
      = f.input :service_maintenance, collection: ['External donor', 'Community-based management', 'Public sector (local)', 'Public sector (national)', 'Private sector', 'Utility management', 'Household management', 'Other'], as: :check_boxes
      = f.input :service_standarization, collection: ['External donor', 'Community-based management', 'Public sector (local)', 'Public sector (national)', 'Private sector', 'Utility management', 'Household management', 'Other'], as: :check_boxes
      = f.input :service_costing, collection: ['External donor', 'Community-based management', 'Public sector (local)', 'Public sector (national)', 'Private sector', 'Utility management', 'Household management', 'Other'], as: :check_boxes
      = f.input :average_household_income
      = f.input :average_household_size
      .technologies
        %h2 Technologies
        .technology
          = f.fields_for :technologies do |t|
            .caption
              %h3 Tecnology
            = t.input :type, collection: ['Borehole and Handpump', 'Mechanised Borehole', 'Single Town System', 'Multi-Town System', 'Small Scale Rain Fedsystem', 'Protected Well', 'Rural Gravity Fed System', 'Mixed Piped System'], input_html: { class: 'chzn-select'}
            = t.input :number_of_systems
            = t.input :expected_number_of_people
            = t.input :server_number_of_people
            = t.fields_for :water_source do |w|
              %h3 Water Source
              = w.input :source, collection: ['Ground Water', 'Surface Water', 'Rain Water', 'Don\'t Know'], input_html: { class: 'chzn-select'}
              -#= w.input :primary_source
              -#= w.input :common_pump
              = w.input :storing, collection: ['Elevated Steel Reservoir','Dont\'t Know'], as: :check_boxes
              = w.input :treating, collection: ['No Treatment', 'Boiling', 'Household Filter', 'Household Chlorination', 'Chlorination In Pipied System', 'Water Treatment Works', 'Not Aplicable'], as: :check_boxes
              = w.input :power_supply, collection: ['No Power', 'Mains Electricity', 'Windmills', 'Solar Power System', 'Generator', 'Not Aplicable'], as: :check_boxes
              = w.input :length
            .costs
              = t.fields_for :costs do |c|
                %h3 Costs
                = c.fields_for :capital do |cc|
                  %h4 Capital Costs
                  = cc.input :hardware_total
                  = cc.input :source
                  = cc.input :pumping_facilities
                  = cc.input :transmission
                  = cc.input :distribution
                  = cc.input :storage
                  = cc.input :treatment
                  = cc.input :other
                  = cc.input :software_total
                = c.fields_for :recurrent do |rc|
                  %h4 Recurrent Costs
                  = rc.input :total
                  = rc.input :salaries
                  = rc.input :electricity
                  = rc.input :material
                  = rc.input :administration
                  = rc.input :treatment
                  = rc.input :other
                  = rc.input :capital_maintenance_expenditure
                  = rc.input :loan_cost
                  = rc.input :loan_time
                = c.input :direct_support_spent
                = c.input :indirect_support_spent
      .service_level
        %h1 Service Levels
        = f.fields_for :service_levels do |s|
          %h3 Service Level
          = s.input :accesibility_distance, collection: ['More than 60 min', 'Between 30 and 60 min', 'Between 10 and 30 min', 'Less than 10 min'], input_html: { class: 'chzn-select'}
          = s.input :accesibility_queues, collection: %w(Yes No), input_html: { class: 'chzn-select'}
          = s.input :accesibility_norms, collection: ['Yes', 'No', 'Don\'t Know'], input_html: { class: 'chzn-select'}
          = s.input :quantity_use, collection: ['Less than 5 liters', 'Between 5 and 19 liters', 'Between 20 and 60 liters', 'More than 60 liters'], input_html: { class: 'chzn-select'}
          = s.input :quantity_norms, collection: ['Yes', 'No', 'Don\'t Know'], input_html: { class: 'chzn-select'}
          = s.input :quality_testing, collection: ['No Testing', 'One-off testing after construction that meet standards', 'Ocassional that meets standards', 'Regular and meets standards'], input_html: { class: 'chzn-select'}
          = s.input :quality_norms, collection: ['Yes', 'No', 'Don\'t Know'], input_html: { class: 'chzn-select'}
          = s.input :reliability, collection: ['Yes', 'No', 'Don\'t Know'], input_html: { class: 'chzn-select'}
          = s.input :reliability_norms, collection: ['Unreliable/insecure', 'Problematic', 'Reliable/secure', 'Very reliable'], input_html: { class: 'chzn-select'}
          = s.input :percentage_using
      .submit
        = f.submit 'save', name: 'commit', class: 'button primary'
